"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const DEVICE_WIDTH = _reactNative.Dimensions.get('window').width;

const DEVICE_HEIGHT = _reactNative.Dimensions.get('window').height;

class Drawer extends _react.Component {
  constructor(props) {
    super(props);

    this.onOverlayClick = e => {
      const {
        maskClosable
      } = this.props;

      if (!maskClosable) {
        return false;
      }

      e.stopPropagation();
      this.closeDrawer();
    };

    this.state = {
      zIndexValue: 0,
      overlayValue: new _reactNative.Animated.Value(0),
      drawerValue: new _reactNative.Animated.ValueXY({ ...this.getInitPosition()
      })
    };
  }

  componentDidMount() {
    if (this.props.isOpen) {
      this.openDrawer();
    }
  }

  UNSAFE_componentWillReceiveProps(nextProps) {
    if (nextProps.isOpen !== this.props.isOpen) {
      this.handleDrawer(!!nextProps.isOpen);
    }
  }

  render() {
    const {
      isOpen,
      style,
      drawerWidth,
      drawerBackgroundColor,
      maskProps,
      placement,
      drawerHeight
    } = this.props;
    const {
      drawerValue,
      overlayValue,
      zIndexValue
    } = this.state;
    const isTopOrBottom = placement === 'top' || placement === 'bottom';
    const changeStyle = isTopOrBottom ? 'height' : 'width';
    const dynamicDrawerStyles = {
      backgroundColor: drawerBackgroundColor
    };

    if (isTopOrBottom) {
      dynamicDrawerStyles.top = placement === 'top' ? 0 : null;
      dynamicDrawerStyles.bottom = placement === 'bottom' ? 0 : null;
      dynamicDrawerStyles.height = drawerWidth;
      dynamicDrawerStyles.width = '100%';
    } else {
      dynamicDrawerStyles.left = placement === 'left' ? 0 : null;
      dynamicDrawerStyles.right = placement === 'right' ? 0 : null;
      dynamicDrawerStyles.width = drawerWidth;
    }

    const overlayOpacity = overlayValue.interpolate({
      inputRange: [0, 1],
      outputRange: [0, 0.3],
      extrapolate: 'clamp'
    });
    return <_react.Fragment>
        <_reactNative.Animated.View style={[styles.drawer, dynamicDrawerStyles, style, // eslint-disable-next-line react-native/no-inline-styles
      {
        [changeStyle]: isOpen ? isTopOrBottom ? drawerHeight : drawerWidth : 0,
        transform: [{
          translateX: drawerValue.x
        }, // x轴移动
        {
          translateY: drawerValue.y
        } // y轴移动
        ]
      }]}>
          {this.props.children}
        </_reactNative.Animated.View>
        <_reactNative.Animated.View pointerEvents={isOpen ? 'auto' : 'none'} style={[styles.overlay, styles.positionFull, maskProps, {
        // opacity: overlayValue,
        opacity: overlayOpacity,
        zIndex: zIndexValue
      }]}>
          <_reactNative.TouchableOpacity style={[styles.positionFull, // eslint-disable-next-line react-native/no-inline-styles
        {
          zIndex: 3003,
          position: 'absolute'
        }]} onPress={this.onOverlayClick.bind(this)} />
        </_reactNative.Animated.View>
      </_react.Fragment>;
  }

  handleDrawer(isOpen) {
    isOpen ? this.openDrawer() : this.closeDrawer();
  }

  getInitPosition() {
    const {
      drawerWidth,
      placement,
      drawerHeight
    } = this.props;
    const xy = {
      x: 0,
      y: 0
    };

    if (placement === 'left') {
      xy.x = -(drawerWidth || 0);
    }

    if (placement === 'right') {
      xy.x = DEVICE_WIDTH || 0;
    }

    if (placement === 'top') {
      xy.y = -(drawerHeight || 0);
    }

    if (placement === 'bottom') {
      xy.y = DEVICE_HEIGHT || 0;
    }

    return xy;
  }

  openDrawer() {
    this.setState({
      zIndexValue: 3002
    });

    _reactNative.Animated.parallel([_reactNative.Animated.spring(this.state.drawerValue, {
      toValue: {
        x: 0,
        y: 0
      },
      overshootClamping: true,
      useNativeDriver: true
    }), _reactNative.Animated.spring(this.state.overlayValue, {
      toValue: 0.7,
      overshootClamping: true,
      useNativeDriver: true
    })]).start(() => {
      this.props.openDrawer(true);
      this.props.onChange(true);
    });
  }

  closeDrawer() {
    const {
      drawerValue,
      overlayValue
    } = this.state;

    _reactNative.Animated.parallel([_reactNative.Animated.spring(drawerValue, {
      toValue: { ...this.getInitPosition()
      },
      overshootClamping: true,
      useNativeDriver: true
    }), _reactNative.Animated.spring(overlayValue, {
      toValue: 0,
      overshootClamping: true,
      useNativeDriver: true
    })]).start(() => {
      this.props.closeDrawer(false);
      this.props.onChange(false);
      this.setState({
        zIndexValue: 0
      });
    });
  }

}

exports.default = Drawer;
Drawer.defaultProps = {
  placement: 'left',
  drawerBackgroundColor: '#fff',
  drawerWidth: 300,
  drawerHeight: 500,
  maskClosable: true,
  isOpen: false,
  onChange: () => null,
  openDrawer: () => null,
  closeDrawer: () => null
};

const styles = _reactNative.StyleSheet.create({
  drawer: {
    position: 'absolute',
    top: 0,
    bottom: 0,
    flex: 1,
    zIndex: 3004
  },
  positionFull: {
    position: 'absolute',
    top: 0,
    bottom: 0,
    left: 0,
    right: 0
  },
  overlay: {
    backgroundColor: '#000',
    zIndex: 3002
  }
});

module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,