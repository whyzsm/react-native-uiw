"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = BodyRow;

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function BodyRow({
  columns,
  record,
  style
}) {
  return <_reactNative.View style={[styles.row, style]}>
      {columns.map((itm, idx) => {
      // row渲染的内容
      let val = '';

      if (itm.dataIndex.indexOf('.') > -1) {
        const firstKey = itm.dataIndex.split('.')[0];
        const secondKey = itm.dataIndex.split('.')[1];
        val = record[firstKey][secondKey];
      } else {
        val = record[itm.dataIndex];
      } // 是否省略多余文字


      let textEllipsize = itm.ellipsis && itm.ellipsis ? {
        numberOfLines: 1,
        ellipsizeMode: 'tail'
      } : null;
      return <_reactNative.View key={itm.dataIndex} style={[styles.cell, itm.style]}>
            {itm.render ? itm.render(record) : <_reactNative.Text selectable={true} {...textEllipsize} style={styles.content}>
                {val}
              </_reactNative.Text>}
          </_reactNative.View>;
    })}
    </_reactNative.View>;
}

const styles = _reactNative.StyleSheet.create({
  row: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignContent: 'center',
    borderBottomWidth: 1,
    borderColor: '#E5E5E5'
  },
  cell: {
    flex: 1,
    flexDirection: 'row',
    justifyContent: 'center',
    borderRightWidth: 1,
    borderRightColor: '#E5E5E5',
    paddingTop: 4,
    paddingBottom: 4,
    backgroundColor: '#fff'
  },
  content: {
    color: '#888888'
  }
});

module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9UYWJsZS9Cb2R5Um93LnRzeCJdLCJuYW1lcyI6WyJCb2R5Um93IiwiY29sdW1ucyIsInJlY29yZCIsInN0eWxlIiwic3R5bGVzIiwicm93IiwibWFwIiwiaXRtIiwiaWR4IiwidmFsIiwiZGF0YUluZGV4IiwiaW5kZXhPZiIsImZpcnN0S2V5Iiwic3BsaXQiLCJzZWNvbmRLZXkiLCJ0ZXh0RWxsaXBzaXplIiwiZWxsaXBzaXMiLCJudW1iZXJPZkxpbmVzIiwiZWxsaXBzaXplTW9kZSIsImNlbGwiLCJyZW5kZXIiLCJjb250ZW50IiwiU3R5bGVTaGVldCIsImNyZWF0ZSIsImZsZXhEaXJlY3Rpb24iLCJqdXN0aWZ5Q29udGVudCIsImFsaWduQ29udGVudCIsImJvcmRlckJvdHRvbVdpZHRoIiwiYm9yZGVyQ29sb3IiLCJmbGV4IiwiYm9yZGVyUmlnaHRXaWR0aCIsImJvcmRlclJpZ2h0Q29sb3IiLCJwYWRkaW5nVG9wIiwicGFkZGluZ0JvdHRvbSIsImJhY2tncm91bmRDb2xvciIsImNvbG9yIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7Ozs7QUFtQmUsU0FBU0EsT0FBVCxDQUFpQjtBQUFFQyxFQUFBQSxPQUFGO0FBQVdDLEVBQUFBLE1BQVg7QUFBbUJDLEVBQUFBO0FBQW5CLENBQWpCLEVBQTJEO0FBQ3hFLFNBQ0UsbUJBQU0sTUFBTSxDQUFDLENBQUNDLE1BQU0sQ0FBQ0MsR0FBUixFQUFhRixLQUFiLENBQUQsQ0FBWjtBQUNKLE1BQU0sQ0FBQ0YsT0FBTyxDQUFDSyxHQUFSLENBQVksQ0FBQ0MsR0FBRCxFQUFNQyxHQUFOLEtBQWM7QUFDekI7QUFDQSxVQUFJQyxHQUFHLEdBQUcsRUFBVjs7QUFDQSxVQUFJRixHQUFHLENBQUNHLFNBQUosQ0FBY0MsT0FBZCxDQUFzQixHQUF0QixJQUE2QixDQUFDLENBQWxDLEVBQXFDO0FBQ25DLGNBQU1DLFFBQVEsR0FBR0wsR0FBRyxDQUFDRyxTQUFKLENBQWNHLEtBQWQsQ0FBb0IsR0FBcEIsRUFBeUIsQ0FBekIsQ0FBakI7QUFDQSxjQUFNQyxTQUFTLEdBQUdQLEdBQUcsQ0FBQ0csU0FBSixDQUFjRyxLQUFkLENBQW9CLEdBQXBCLEVBQXlCLENBQXpCLENBQWxCO0FBQ0FKLFFBQUFBLEdBQUcsR0FBR1AsTUFBTSxDQUFDVSxRQUFELENBQU4sQ0FBaUJFLFNBQWpCLENBQU47QUFDRCxPQUpELE1BSU87QUFDTEwsUUFBQUEsR0FBRyxHQUFHUCxNQUFNLENBQUNLLEdBQUcsQ0FBQ0csU0FBTCxDQUFaO0FBQ0QsT0FUd0IsQ0FXekI7OztBQUNBLFVBQUlLLGFBQXVDLEdBQ3pDUixHQUFHLENBQUNTLFFBQUosSUFBZ0JULEdBQUcsQ0FBQ1MsUUFBcEIsR0FDSTtBQUNFQyxRQUFBQSxhQUFhLEVBQUUsQ0FEakI7QUFFRUMsUUFBQUEsYUFBYSxFQUFFO0FBRmpCLE9BREosR0FLSSxJQU5OO0FBUUEsYUFDRSxtQkFBTSxJQUFJLENBQUNYLEdBQUcsQ0FBQ0csU0FBTCxDQUFWLENBQTBCLE1BQU0sQ0FBQyxDQUFDTixNQUFNLENBQUNlLElBQVIsRUFBY1osR0FBRyxDQUFDSixLQUFsQixDQUFELENBQWhDO0FBQ1YsWUFBWSxDQUFDSSxHQUFHLENBQUNhLE1BQUosR0FDQ2IsR0FBRyxDQUFDYSxNQUFKLENBQVdsQixNQUFYLENBREQsR0FHQyxtQkFBTSxXQUFXLENBQUMsSUFBRCxDQUFqQixDQUF3QixJQUFJYSxhQUFKLENBQXhCLENBQTJDLE1BQU0sQ0FBQ1gsTUFBTSxDQUFDaUIsT0FBUixDQUFqRDtBQUNkLGdCQUFnQixDQUFDWixHQUFEO0FBQ2hCLGNBQWMsb0JBTEY7QUFPWixVQUFVLG9CQVRGO0FBV0QsS0EvQkEsQ0FBRDtBQWdDTixJQUFJLG9CQWxDRjtBQW9DRDs7QUFFRCxNQUFNTCxNQUFNLEdBQUdrQix3QkFBV0MsTUFBWCxDQUFrQjtBQUMvQmxCLEVBQUFBLEdBQUcsRUFBRTtBQUNIbUIsSUFBQUEsYUFBYSxFQUFFLEtBRFo7QUFFSEMsSUFBQUEsY0FBYyxFQUFFLFFBRmI7QUFHSEMsSUFBQUEsWUFBWSxFQUFFLFFBSFg7QUFJSEMsSUFBQUEsaUJBQWlCLEVBQUUsQ0FKaEI7QUFLSEMsSUFBQUEsV0FBVyxFQUFFO0FBTFYsR0FEMEI7QUFRL0JULEVBQUFBLElBQUksRUFBRTtBQUNKVSxJQUFBQSxJQUFJLEVBQUUsQ0FERjtBQUVKTCxJQUFBQSxhQUFhLEVBQUUsS0FGWDtBQUdKQyxJQUFBQSxjQUFjLEVBQUUsUUFIWjtBQUlKSyxJQUFBQSxnQkFBZ0IsRUFBRSxDQUpkO0FBS0pDLElBQUFBLGdCQUFnQixFQUFFLFNBTGQ7QUFNSkMsSUFBQUEsVUFBVSxFQUFFLENBTlI7QUFPSkMsSUFBQUEsYUFBYSxFQUFFLENBUFg7QUFRSkMsSUFBQUEsZUFBZSxFQUFFO0FBUmIsR0FSeUI7QUFrQi9CYixFQUFBQSxPQUFPLEVBQUU7QUFDUGMsSUFBQUEsS0FBSyxFQUFFO0FBREE7QUFsQnNCLENBQWxCLENBQWYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVmlldywgVGV4dCwgU3R5bGVTaGVldCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5cbmludGVyZmFjZSBCb2R5Um93UHJvcHMge1xuICBjb2x1bW5zOiBBcnJheTxjb2x1bW5zU3RhdGU+O1xuICByZWNvcmQ6IE9iamVjdCB8IGFueTtcbiAgc3R5bGU/OiBPYmplY3Q7XG59XG5cbmludGVyZmFjZSBjb2x1bW5zU3RhdGUge1xuICBkYXRhSW5kZXg6IHN0cmluZztcbiAgdGl0bGU6IHN0cmluZztcbiAgc3R5bGU/OiBPYmplY3Q7XG4gIHJlbmRlcj86IChyZWNvcmQ6IGFueSkgPT4gUmVhY3QuUmVhY3ROb2RlO1xuICBlbGxpcHNpcz86IGJvb2xlYW47XG59XG5pbnRlcmZhY2UgdGV4dEVsbGlwc2l6ZVN0YXRlIHtcbiAgbnVtYmVyT2ZMaW5lczogbnVtYmVyO1xuICBlbGxpcHNpemVNb2RlOiBzdHJpbmc7XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBCb2R5Um93KHsgY29sdW1ucywgcmVjb3JkLCBzdHlsZSB9OiBCb2R5Um93UHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICA8VmlldyBzdHlsZT17W3N0eWxlcy5yb3csIHN0eWxlXX0+XG4gICAgICB7Y29sdW1ucy5tYXAoKGl0bSwgaWR4KSA9PiB7XG4gICAgICAgIC8vIHJvd+a4suafk+eahOWGheWuuVxuICAgICAgICBsZXQgdmFsID0gJyc7XG4gICAgICAgIGlmIChpdG0uZGF0YUluZGV4LmluZGV4T2YoJy4nKSA+IC0xKSB7XG4gICAgICAgICAgY29uc3QgZmlyc3RLZXkgPSBpdG0uZGF0YUluZGV4LnNwbGl0KCcuJylbMF07XG4gICAgICAgICAgY29uc3Qgc2Vjb25kS2V5ID0gaXRtLmRhdGFJbmRleC5zcGxpdCgnLicpWzFdO1xuICAgICAgICAgIHZhbCA9IHJlY29yZFtmaXJzdEtleV1bc2Vjb25kS2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWwgPSByZWNvcmRbaXRtLmRhdGFJbmRleF07XG4gICAgICAgIH1cblxuICAgICAgICAvLyDmmK/lkKbnnIHnlaXlpJrkvZnmloflrZdcbiAgICAgICAgbGV0IHRleHRFbGxpcHNpemU6IHRleHRFbGxpcHNpemVTdGF0ZSB8IGFueSA9XG4gICAgICAgICAgaXRtLmVsbGlwc2lzICYmIGl0bS5lbGxpcHNpc1xuICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgbnVtYmVyT2ZMaW5lczogMSxcbiAgICAgICAgICAgICAgICBlbGxpcHNpemVNb2RlOiAndGFpbCcsXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogbnVsbDtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxWaWV3IGtleT17aXRtLmRhdGFJbmRleH0gc3R5bGU9e1tzdHlsZXMuY2VsbCwgaXRtLnN0eWxlXX0+XG4gICAgICAgICAgICB7aXRtLnJlbmRlciA/IChcbiAgICAgICAgICAgICAgaXRtLnJlbmRlcihyZWNvcmQpXG4gICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICA8VGV4dCBzZWxlY3RhYmxlPXt0cnVlfSB7Li4udGV4dEVsbGlwc2l6ZX0gc3R5bGU9e3N0eWxlcy5jb250ZW50fT5cbiAgICAgICAgICAgICAgICB7dmFsfVxuICAgICAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvVmlldz5cbiAgICAgICAgKTtcbiAgICAgIH0pfVxuICAgIDwvVmlldz5cbiAgKTtcbn1cblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICByb3c6IHtcbiAgICBmbGV4RGlyZWN0aW9uOiAncm93JyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgYWxpZ25Db250ZW50OiAnY2VudGVyJyxcbiAgICBib3JkZXJCb3R0b21XaWR0aDogMSxcbiAgICBib3JkZXJDb2xvcjogJyNFNUU1RTUnLFxuICB9LFxuICBjZWxsOiB7XG4gICAgZmxleDogMSxcbiAgICBmbGV4RGlyZWN0aW9uOiAncm93JyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgYm9yZGVyUmlnaHRXaWR0aDogMSxcbiAgICBib3JkZXJSaWdodENvbG9yOiAnI0U1RTVFNScsXG4gICAgcGFkZGluZ1RvcDogNCxcbiAgICBwYWRkaW5nQm90dG9tOiA0LFxuICAgIGJhY2tncm91bmRDb2xvcjogJyNmZmYnLFxuICB9LFxuICBjb250ZW50OiB7XG4gICAgY29sb3I6ICcjODg4ODg4JyxcbiAgfSxcbn0pO1xuIl19