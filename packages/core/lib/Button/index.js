"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _utils = require("../utils");

var _Div = _interopRequireDefault(require("../Typography/Div"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class ButtonView extends _react.default.Component {
  render() {
    const {
      children,
      style,
      textStyle: childStyle,
      rounded,
      bordered,
      color: buttonColor,
      type,
      size,
      disabled,
      loading,
      ...restProps
    } = this.props;
    let backgroundColor, textColor, borderColor, borderWidth, borderRadius;

    switch (type) {
      case 'warning':
        backgroundColor = _utils.colors.yellow;
        break;

      case 'primary':
        backgroundColor = _utils.colors.blue;
        break;

      case 'success':
        backgroundColor = _utils.colors.green;
        break;

      case 'danger':
        backgroundColor = _utils.colors.red;
        break;

      case 'light':
        backgroundColor = _utils.colors.white;
        break;

      case 'dark':
        backgroundColor = _utils.colors.black;
        break;

      default:
        break;
    }

    if (backgroundColor) {
      backgroundColor = (0, _utils.color)(backgroundColor).rgb().string();
    }

    if (type) {
      textColor = (0, _utils.color)(backgroundColor).isLight() ? (0, _utils.color)(_utils.colors.black).rgb().string() : (0, _utils.color)(_utils.colors.white).rgb().string();
    }

    if (!type) {
      borderColor = (0, _utils.color)(_utils.colors.black).alpha(0.32).rgb().string();
      borderWidth = 1;
    }

    if (disabled) {
      textColor = (0, _utils.color)(textColor).alpha(0.3).rgb().string();
    }

    if (buttonColor) {
      backgroundColor = (0, _utils.color)(buttonColor).rgb().string();
      textColor = (0, _utils.color)(buttonColor).isLight() ? (0, _utils.color)(buttonColor).darken(0.9).string() : (0, _utils.color)(buttonColor).lighten(0.9).string();
    }

    if (rounded && typeof rounded === 'number') {
      borderRadius = rounded;
    }

    if (backgroundColor) {
      borderColor = (0, _utils.color)(backgroundColor).darken(0.2).string();
      borderWidth = 1;
    }

    if (!bordered) {
      borderWidth = 0;
    }

    const buttonStyle = {
      backgroundColor,
      borderColor,
      borderWidth,
      borderRadius
    };
    const textStyle = {
      color: textColor
    };
    let sizeStyle = {};

    if (size && styles[size]) {
      sizeStyle = styles[size];
    }

    let boxStyle = {};
    const stylKey = `${size}Box`;

    if (size && styles[stylKey]) {
      boxStyle = styles[stylKey];
    }

    if (!children) {
      return null;
    }

    return <_reactNative.TouchableOpacity style={[styles.button, styles.content, buttonStyle, boxStyle, style]} disabled={disabled} {...restProps}>
        {loading && <_reactNative.ActivityIndicator size={16} color={textColor} style={styles.icon} />}
        {_react.default.Children.toArray(children).map((child, idx) => {
        return <_Div.default key={idx} style={[sizeStyle, styles.label, textStyle, childStyle]}>
              {child}
            </_Div.default>;
      })}
      </_reactNative.TouchableOpacity>;
  }

}

exports.default = ButtonView;
ButtonView.defaultProps = {
  activeOpacity: 0.5,
  rounded: 5,
  bordered: true,
  size: 'default'
};

const styles = _reactNative.StyleSheet.create({
  button: {
    borderStyle: 'solid',
    display: 'flex'
  },
  content: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center'
  },
  icon: {
    width: 16,
    marginRight: 4
  },
  label: {// textAlign: 'center',
  },
  smallBox: {
    paddingHorizontal: 3
  },
  defaultBox: {
    paddingHorizontal: 8
  },
  largeBox: {
    paddingHorizontal: 10
  },
  small: {
    marginVertical: 4,
    fontSize: 14
  },
  default: {
    marginVertical: 8,
    fontSize: 16
  },
  large: {
    marginVertical: 10,
    fontSize: 18
  }
});

module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,