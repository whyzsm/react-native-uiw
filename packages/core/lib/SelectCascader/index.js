"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactNative = require("react-native");

var _react = _interopRequireWildcard(require("react"));

var _picker = require("@react-native-picker/picker");

var _arrayTreeFilter = _interopRequireDefault(require("../utils/arrayTreeFilter"));

var _Modal = _interopRequireDefault(require("../Modal"));

var _utils = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class SelectCascader extends _react.Component {
  constructor(...args) {
    super(...args);
    this.state = {
      value: this.getValue(this.props.data, this.props.defaultValue || this.props.value),
      modalVisible: this.props.visible
    };

    this.outerCtrl = () => {
      this.setState({
        modalVisible: !this.state.modalVisible
      });
    };

    this.onValueChange = (itemValue, index) => {
      const value = this.state.value.concat();
      value[index] = itemValue;
      const children = (0, _arrayTreeFilter.default)(this.props.data, (c, level) => {
        return level <= index && c.value === value[level];
      });
      let data = children[index];
      let i;

      for (i = index + 1; data && data.children && data.children.length && i < this.props.cols; i++) {
        data = data.children[0];
        value[i] = data.value;
      }

      value.length = i;
      value[index] = itemValue;
      this.setState({
        value
      });

      if (this.props.onChange) {
        this.props.onChange(value, this.getSel(value));
      }
    };

    this.getCols = () => {
      const {
        data,
        cols,
        pickerItemStyle
      } = this.props;
      const {
        value
      } = this.state;
      const childrenTree = (0, _arrayTreeFilter.default)(data, (c, level) => {
        return c.value === value[level];
      }).map(c => c.children);
      const needPad = cols - childrenTree.length;

      if (needPad > 0) {
        for (let i = 0; i < needPad; i++) {
          childrenTree.push([]);
        }
      }

      childrenTree.length = cols - 1;
      childrenTree.unshift(data);
      return childrenTree.map((children = [], level) => <_picker.Picker key={level} // eslint-disable-next-line react-native/no-inline-styles
      style={{
        flex: 1
      }} selectedValue={value[level]} onValueChange={itemValue => this.onValueChange(itemValue, level)} itemStyle={pickerItemStyle}>
        {children.map(item => <_picker.Picker.Item value={item.value} label={item.label} key={item.value} />)}
      </_picker.Picker>);
    };

    this.onDismiss = () => {
      if (this.props.onDismiss) {
        this.props.onDismiss();
      }
    };

    this.onOk = () => {
      if (this.props.onOk) {
        const {
          value
        } = this.state;
        this.props.onOk(value, this.getSel(value));
      }
    };
  }

  componentWillReceiveProps(nextProps) {
    if ('value' in nextProps) {
      this.setState({
        value: this.getValue(nextProps.data, nextProps.value)
      });
    }

    if ('visible' in nextProps) {
      this.setState({
        modalVisible: nextProps.visible
      });
    }
  }

  getSel(value) {
    if (!value) {
      return '';
    }

    const treeChildren = (0, _arrayTreeFilter.default)(this.props.data, (c, level) => {
      return c.value === value[level];
    });
    return treeChildren.map(v => {
      return v.label;
    }).join(',');
  }

  getValue(d, val) {
    let data = d || this.props.data;
    let value = val || this.props.value || this.props.defaultValue;

    if (!value || !value.length || value.indexOf(undefined) > -1) {
      value = [];

      for (let i = 0; i < this.props.cols; i++) {
        if (data && data.length) {
          value[i] = data[0].value;

          if (data[0].children) {
            data = data[0].children;
          }
        }
      }
    }

    return value;
  }

  render() {
    const {
      title,
      dismissText,
      okText,
      onDismiss,
      headerStyle
    } = this.props;
    const cols = this.getCols();
    return <_Modal.default visible={this.state.modalVisible} onClosed={() => {
      this.setState({
        modalVisible: false
      });
    }}>
        <>
          <_reactNative.View style={[styles.header, headerStyle]}>
            <_reactNative.TouchableHighlight onPress={onDismiss} style={[styles.headerItem]}>
              <_reactNative.Text>{dismissText}</_reactNative.Text>
            </_reactNative.TouchableHighlight>
            <_reactNative.View style={[styles.headerItem]}>
              <_reactNative.Text>{title}</_reactNative.Text>
            </_reactNative.View>
            <_reactNative.TouchableHighlight onPress={this.onOk} style={[styles.headerItem]}>
              <_reactNative.Text>{okText}</_reactNative.Text>
            </_reactNative.TouchableHighlight>
          </_reactNative.View>
          <_reactNative.View style={styles.list}>{cols}</_reactNative.View>
        </>
      </_Modal.default>;
  }

}

exports.default = SelectCascader;
SelectCascader.defaultProps = {
  dismissText: '取消',
  okText: '确定',
  title: '请选择',
  disabled: false,
  cols: 3
};

const styles = _reactNative.StyleSheet.create({
  header: {
    height: 44,
    alignItems: 'center',
    flexDirection: 'row',
    justifyContent: 'center',
    borderBottomWidth: 1,
    borderBottomColor: _utils.colors.blue
  },
  headerItem: {
    height: 44,
    alignItems: 'center',
    justifyContent: 'center',
    flex: 1
  },
  list: {
    flexDirection: 'row',
    alignItems: 'center'
  }
});

module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,