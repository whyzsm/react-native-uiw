"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _Flex = _interopRequireDefault(require("../Flex"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function MaybeTextOrView({
  children,
  ...otherProps
}) {
  if (typeof children === 'string' || children && children.type.displayName === 'Text') {
    return <_reactNative.Text {...otherProps}>{children}</_reactNative.Text>;
  }

  return <_reactNative.View {...otherProps}>{children}</_reactNative.View>;
}

const styles = _reactNative.StyleSheet.create({
  defalut: {
    backgroundColor: '#fff'
  },
  touchWarpper: {
    flex: 1,
    width: '100%',
    alignItems: 'center',
    justifyContent: 'center'
  }
});

class Grid extends _react.Component {
  render() {
    const {
      style,
      data,
      iconStyle,
      textStyle,
      itemStyle,
      renderItem,
      hasLine,
      columns = 4,
      onPress,
      ...otherProps
    } = this.props;

    if (!Array.isArray(data)) {
      return null;
    }

    const childs = [];
    let childItem = [];
    data.forEach((item, idx) => {
      if (idx !== 0 && idx % columns === 0) {
        childs.push(childItem);
        childItem = [];
      }

      let icon = null;

      if (_react.default.isValidElement(item.icon)) {
        icon = item.icon;
      } else if (item.icon) {
        icon = <_reactNative.Image style={[{
          width: 36,
          height: 36
        }, _reactNative.StyleSheet.flatten(iconStyle)]} source={typeof item.icon === 'number' ? item.icon : {
          uri: item.icon
        }} />;
      }

      if (renderItem && typeof renderItem === 'function') {
        childItem.push(renderItem(item, idx, parseInt((idx / columns).toString(), 10) + 1));
      } else {
        const itemContent = <_react.Fragment>
            {icon && <MaybeTextOrView style={iconStyle}>{icon}</MaybeTextOrView>}
            <MaybeTextOrView style={[{
            marginTop: 9,
            fontSize: 12
          }, textStyle]}>{item.text}</MaybeTextOrView>
          </_react.Fragment>;
        childItem.push(<_Flex.default direction="column" align="center" justify="center" style={[{
          height: 120
        }, _reactNative.StyleSheet.flatten(itemStyle), {
          width: `${100 / columns}%`
        }]}>
            {onPress ? <_reactNative.TouchableOpacity style={styles.touchWarpper} onPress={onPress.bind(this, item, idx, parseInt((idx / columns).toString(), 10) + 1)}>
                {itemContent}
              </_reactNative.TouchableOpacity> : itemContent}
          </_Flex.default>);
      }

      if (idx === data.length - 1) {
        childs.push(childItem);
      }
    });
    return <_reactNative.View style={[styles.defalut, style]} {...otherProps}>
        {childs.map((rowitem, rowidx) => <_Flex.default justify="start" key={rowidx}>
            {rowitem.map((item, idx) => {
          if (!_react.default.isValidElement(item)) {
            return null;
          }

          const itemBorderStyle = {};

          if (hasLine) {
            const hairLineWidth = _reactNative.StyleSheet.hairlineWidth;
            itemBorderStyle.borderBottomWidth = childs.length - 1 === rowidx ? 0 : hairLineWidth;
            itemBorderStyle.borderRightWidth = rowitem.length - 1 === idx && rowitem.length === columns ? 0 : hairLineWidth;
            itemBorderStyle.borderBottomColor = '#ddd';
            itemBorderStyle.borderRightColor = '#ddd';
          }

          return _react.default.cloneElement(item, {
            key: idx,
            style: [itemBorderStyle, item.props.style]
          });
        })}
          </_Flex.default>)}
      </_reactNative.View>;
  }

}

exports.default = Grid;
Grid.defaultProps = {
  data: [],
  hasLine: true
};
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,