"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _Icon = _interopRequireDefault(require("../Icon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const noop = () => {};

function normalizeValue(value) {
  if (typeof value === 'undefined' || value === null) {
    return '';
  }

  return value;
}

class Input extends _react.default.Component {
  constructor(...args) {
    super(...args);
    this.inputRef = void 0;

    this.onChange = text => {
      const {
        onChange,
        type
      } = this.props;
      const maxLength = this.props.maxLength;

      switch (type) {
        case 'bankCard':
          text = text.replace(/\D/g, '');

          if (maxLength > 0) {
            text = text.substring(0, maxLength);
          }

          text = text.replace(/\D/g, '').replace(/(....)(?=.)/g, '$1 ');
          break;

        case 'phone':
          text = text.replace(/\D/g, '').substring(0, 11);
          const valueLen = text.length;

          if (valueLen > 3 && valueLen < 8) {
            text = `${text.substr(0, 3)} ${text.substr(3)}`;
          } else if (valueLen >= 8) {
            text = `${text.substr(0, 3)} ${text.substr(3, 4)} ${text.substr(7)}`;
          }

          break;

        case 'password':
          break;

        default:
          break;
      }

      if (onChange) {
        onChange(text);
      }
    };

    this.onInputClear = () => {
      if (this.inputRef) {
        this.inputRef.clear();
      }

      this.onChange('');
    };
  }

  render() {
    const android = _reactNative.Platform.OS === 'android';
    const {
      type,
      editable,
      clear,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      children,
      error,
      extra,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      last,
      onExtraClick,
      onErrorClick,
      disabled,
      ...restProps
    } = this.props;
    const {
      value,
      defaultValue,
      style
    } = restProps;
    let valueProps;

    if ('value' in this.props) {
      valueProps = {
        value: normalizeValue(value)
      };
    } else {
      valueProps = {
        defaultValue
      };
    }

    const keyboardTypeArray = ['default', 'email-address', 'numeric', 'phone-pad', 'ascii-capable', 'numbers-and-punctuation', 'url', 'number-pad', 'name-phone-pad', 'decimal-pad', 'twitter', 'web-search'];
    let keyboardType = 'default';

    if (type === 'number') {
      keyboardType = 'numeric';
    } else if (type === 'bankCard') {
      keyboardType = 'number-pad'; // 不带小数点
    } else if (type === 'phone') {
      keyboardType = 'phone-pad';
    } else if (type && keyboardTypeArray.indexOf(type) > -1) {
      keyboardType = type;
    }

    const disabledStyle = disabled ? inputStyles.disabledStyle : {};
    const extraStyle = {
      width: typeof extra === 'string' && extra.length > 0 ? extra.length * 17 : 0
    };
    return <_reactNative.View style={inputStyles.container}>
        <_reactNative.TextInput editable={!disabled && editable} clearButtonMode={clear ? 'while-editing' : 'never'} underlineColorAndroid="transparent" ref={el => this.inputRef = el} {...restProps} {...valueProps} style={[inputStyles.input, error ? inputStyles.inputErrorColor : null, disabledStyle, // 支持自定义样式
      style]} keyboardType={keyboardType} onChange={event => this.onChange(event.nativeEvent.text)} secureTextEntry={type === 'password'} />
        {editable && clear && value && android ? <_reactNative.TouchableOpacity style={[inputStyles.clear]} onPress={this.onInputClear} hitSlop={{
        top: 5,
        left: 5,
        bottom: 5,
        right: 5
      }}>
            <_Icon.default name="circle-close" color="#fff" />
          </_reactNative.TouchableOpacity> : null}
        {extra ? <_reactNative.TouchableWithoutFeedback onPress={onExtraClick}>
            <_reactNative.View>
              {typeof extra === 'string' ? <_reactNative.Text style={[inputStyles.extra, extraStyle]}>{extra}</_reactNative.Text> : extra}
            </_reactNative.View>
          </_reactNative.TouchableWithoutFeedback> : null}
        {error && <_reactNative.TouchableWithoutFeedback onPress={onErrorClick}>
            <_reactNative.View style={[inputStyles.errorIcon]}>
              <_Icon.default name="circle-close" color="#dc3545" />
            </_reactNative.View>
          </_reactNative.TouchableWithoutFeedback>}
      </_reactNative.View>;
  }

}

exports.default = Input;
Input.defaultProps = {
  type: 'text',
  editable: true,
  clear: false,
  onChange: noop,
  onBlur: noop,
  onFocus: noop,
  extra: '',
  onExtraClick: noop,
  error: false,
  onErrorClick: noop,
  last: false
};

const inputStyles = _reactNative.StyleSheet.create({
  container: {
    height: 30,
    borderBottomWidth: 1,
    borderBottomColor: '#ccc',
    marginTop: 0,
    marginBottom: 0,
    flexDirection: 'row',
    alignItems: 'center'
  },
  input: {
    flex: 1,
    backgroundColor: 'transparent',
    color: '#000',
    fontSize: 17
  },
  inputErrorColor: {
    color: '#f50'
  },
  disabledStyle: {
    color: '#ccc'
  },
  errorIcon: {
    marginLeft: 5,
    width: 20,
    height: 20
  },
  extra: {
    color: '#888888',
    marginLeft: 5,
    fontSize: 15
  },
  clear: {
    backgroundColor: '#ccc',
    borderRadius: 15,
    padding: 2
  }
});

module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,