"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _item = _interopRequireDefault(require("./item"));

var _Button = _interopRequireDefault(require("../Button"));

var _Icon = _interopRequireDefault(require("../Icon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class MenuDropdown extends _react.default.Component {
  constructor(...args) {
    super(...args);
    this.state = {
      btnIcon: 'down',
      visibleMenu: false,
      listHeightValue: new _reactNative.Animated.Value(0),
      listHeight: 0
    };

    this.handleonPress = () => {
      const {
        visibleMenu
      } = this.state;
      this.setState({
        visibleMenu: !visibleMenu,
        btnIcon: visibleMenu ? 'down' : 'up'
      });

      if (visibleMenu) {
        this.animateClose();
      } else {
        this.animateStart();
      }
    };

    this.animateStart = () => {
      _reactNative.Animated.timing(this.state.listHeightValue, {
        toValue: 1,
        duration: 500,
        useNativeDriver: false // 动画值在不同的驱动方式之间是不能兼容的。因此如果你在某个动画中启用了原生驱动，那么所有和此动画依赖相同动画值的其他动画也必须启用原生驱动。

      }).start();
    };

    this.animateClose = () => {
      this.setState({
        listHeightValue: new _reactNative.Animated.Value(0)
      });
    };

    this.menuContainer = event => {
      const {
        height
      } = event.nativeEvent.layout;
      this.setState({
        listHeight: height
      });
    };
  }

  render() {
    const {
      title,
      children,
      size,
      ...btnProps
    } = this.props;
    const {
      btnIcon,
      listHeightValue,
      listHeight
    } = this.state;
    return <_reactNative.View style={styles.menuBox}>
        <_Button.default {...btnProps} onPress={this.handleonPress} size={size}>
          <_reactNative.Text>{title}</_reactNative.Text>
          <_Icon.default name={btnIcon} size={17} />
        </_Button.default>
        {
        /* {
        visibleMenu && */
      }
        <_reactNative.Animated.View style={[styles.list, // eslint-disable-next-line react-native/no-inline-styles
      {
        opacity: listHeightValue,
        height: listHeightValue.interpolate({
          inputRange: [0, 1],
          outputRange: [0, listHeight || 5]
        }),
        top: size === 'large' ? 35 : size === 'small' ? 21 : 30
      }]}>
          <_reactNative.View onLayout={this.menuContainer}>{children}</_reactNative.View>
        </_reactNative.Animated.View>
        {
        /* } */
      }
      </_reactNative.View>;
  }

}

exports.default = MenuDropdown;
MenuDropdown.defaultProps = {
  title: '菜单'
};
MenuDropdown.Item = void 0;
MenuDropdown.Item = _item.default;

const styles = _reactNative.StyleSheet.create({
  menuBox: {},
  list: {
    position: 'absolute',
    zIndex: 1000,
    left: 0,
    right: 0,
    top: 0,
    height: 100,
    marginTop: 10,
    borderColor: '#ddd',
    borderWidth: 1,
    borderRadius: 1,
    backgroundColor: '#fff',
    overflow: 'hidden'
  }
});

module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,